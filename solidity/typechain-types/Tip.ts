/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TipInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addManager"
      | "balances"
      | "collectFees"
      | "deleteRegistration"
      | "deposit"
      | "getBalance"
      | "getDepositFee"
      | "getIdentifiers"
      | "getWithdrawFee"
      | "identifiers"
      | "managers"
      | "owner"
      | "register"
      | "removeManager"
      | "setDepositFee"
      | "setWithdrawFee"
      | "tip"
      | "transferOwnership"
      | "transferRegistration"
      | "wallets"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "Tipped" | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRegistration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentifiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "identifiers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tip",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRegistration",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "wallets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    amount: BigNumberish,
    identifier: BytesLike,
    wallet: AddressLike,
    when: BigNumberish
  ];
  export type OutputTuple = [
    amount: bigint,
    identifier: string,
    wallet: string,
    when: bigint
  ];
  export interface OutputObject {
    amount: bigint;
    identifier: string;
    wallet: string;
    when: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TippedEvent {
  export type InputTuple = [
    sender: BytesLike,
    recipient: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, recipient: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    amount: BigNumberish,
    identifier: BytesLike,
    wallet: AddressLike,
    when: BigNumberish
  ];
  export type OutputTuple = [
    amount: bigint,
    identifier: string,
    wallet: string,
    when: bigint
  ];
  export interface OutputObject {
    amount: bigint;
    identifier: string;
    wallet: string;
    when: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Tip extends BaseContract {
  connect(runner?: ContractRunner | null): Tip;
  waitForDeployment(): Promise<this>;

  interface: TipInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addManager: TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;

  balances: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  collectFees: TypedContractMethod<[], [void], "nonpayable">;

  deleteRegistration: TypedContractMethod<
    [identifier: BytesLike],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[identifier: BytesLike], [void], "payable">;

  getBalance: TypedContractMethod<[identifier: BytesLike], [bigint], "view">;

  getDepositFee: TypedContractMethod<[], [bigint], "view">;

  getIdentifiers: TypedContractMethod<
    [wallet: AddressLike],
    [string[]],
    "view"
  >;

  getWithdrawFee: TypedContractMethod<[], [bigint], "view">;

  identifiers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  managers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  register: TypedContractMethod<
    [identifier: BytesLike, wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  removeManager: TypedContractMethod<
    [manager: AddressLike],
    [void],
    "nonpayable"
  >;

  setDepositFee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  setWithdrawFee: TypedContractMethod<
    [fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  tip: TypedContractMethod<
    [sender: BytesLike, recipient: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferRegistration: TypedContractMethod<
    [identifier: BytesLike, newWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  wallets: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  withdraw: TypedContractMethod<
    [identifier: BytesLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteRegistration"
  ): TypedContractMethod<[identifier: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[identifier: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[identifier: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdentifiers"
  ): TypedContractMethod<[wallet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWithdrawFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "identifiers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "managers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [identifier: BytesLike, wallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDepositFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tip"
  ): TypedContractMethod<
    [sender: BytesLike, recipient: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferRegistration"
  ): TypedContractMethod<
    [identifier: BytesLike, newWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wallets"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [identifier: BytesLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Tipped"
  ): TypedContractEvent<
    TippedEvent.InputTuple,
    TippedEvent.OutputTuple,
    TippedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Deposit(uint256,bytes32,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Tipped(bytes32,bytes32,uint256)": TypedContractEvent<
      TippedEvent.InputTuple,
      TippedEvent.OutputTuple,
      TippedEvent.OutputObject
    >;
    Tipped: TypedContractEvent<
      TippedEvent.InputTuple,
      TippedEvent.OutputTuple,
      TippedEvent.OutputObject
    >;

    "Withdrawal(uint256,bytes32,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
